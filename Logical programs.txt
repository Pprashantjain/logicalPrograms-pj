1) Fibnoci series 

	public static int fibnoci(int n) {
		if (n == 0) {
			return 0;
		} else if (n == 1) {
			return 1;
		} else {
			return fibnoci(n - 1) + fibnoci(n - 2);
		}
	}

2) factorial - recursion

	public static int factorial(int n) {

		if (n == 1 || n == 0) {
			return 1;
		} else if (n == 2) {
			return 2;
		} else {
			return factorial(n - 1) * n;
		}
	}

3) find max and min in array  - two approach : linear and divide and conquer
	
//linear search
	public static void main(String[] args) {

		int a[] = { 23, 60, 790, 400, 326, 1000, 11, 445, 1, 330, 3000 };
		int min = 0;
		int max = 0;
		int l = a.length;

		if (l == 1) {
			min = a[0];
			max = a[0];
		}
		if (a[0] > a[1]) {
			max = a[0];
			min = a[1];
		} else {
			max = a[1];
			min = a[0];
		}
		for (int i = 0; i < a.length; i++) {

			if (a[i] > max) {
				max = a[i];
			} else if (a[i] < min) {
				min = a[i];
			}
		}
		System.out.println(min + " " + max);
	}

//divide and conquer 

	static class Mxm {

		int max;
		int min;

		static Mxm getCompare(int a[], int low, int high) {

			Mxm m = new Mxm();
			Mxm l = new Mxm();
			Mxm r = new Mxm();
		//when element is 1
			if (low == high) {

				m.min = a[low];
				m.max = a[low];
				return m;
			}
//when element is 2
			if (low == high + 1) {
				if (a[low] > a[high]) {
					m.max = a[low];
					m.min = a[high];
				} else {
					m.max = a[high];
					m.min = a[low];
				}
			}
//more than 2 then two equal half => find max and min for both half and then compare
			int mid = (low + high) / 2;
			l = getCompare(a, low, mid);
			r = getCompare(a, mid + 1, high);

			if (l.min > r.min) {
				m.min = r.min;
			} else {
				m.min = l.min;
			}

			if (l.max > r.max) {
				m.max = l.max;
			} else {
				m.max = r.max;
			}
			return m;
		}

		public static void main(String[] args) {

			int a[] = { 232, 630, 4790, 400, 326, 10300, 11, 445, 211, 3230, 32000 };
			Mxm m = getCompare(a, 0, a.length - 1);
			System.out.println(m.min + " " + m.max);
		}
 
4) find peak element in array - binray search (divide and conquer)

	public static int peak(int a[], int start, int end) {

		int mid = (start + end) / 2;

		if (a[0] > a[1]) {
			return a[0];
		}
		if (a[a.length - 1] > a[a.length - 2]) {
			return a[a.length - 1];
		}
		if (a[mid] > a[mid - 1] && a[mid] > a[mid + 1]) {
			return a[mid];
		}
		if (a[mid - 1] > a[mid]) {
			return peak(a, 1, mid - 1);
		} else {
			return peak(a, mid + 1, end);
		}
	}


5) Document distance problem : 


6) insert sort : 
less space more time
take first element compare with others and move to next position
o(nxn)

	public static int[] insertSort(int a[], int l) {

		int temp = 0;
		int cnt = 0;
		while (cnt < l) {
			for (int i = cnt + 1; i < l; i++) {
				if (a[i] < a[cnt]) {
					temp = a[cnt];
					a[cnt] = a[i];
					a[i] = temp;
				}
			}
			cnt++;
		}
		return a;
	}

7) merge sort :
more space less time

divide the array in two half and compare the two halves and add them to form a sorted array.

o(nlogn)

8) merege sort with recursion

9)
Binary tree array :

left 2i+1
right 2i+2

10)  Binary Search Tree

public class BinarySearchTree {

	class Node {
		Node left;
		Node right;
		int data;

		Node(int data) {
			this.data = data;
			this.left = null;
			this.right = null;
		}
	}

	Node root;

	public Node insertNode(Node root, int data) {

		if (root == null) {
			return new Node(data);
		} else {
			if (data <= root.data) {
				root.left = insertNode(root.left, data);
			} else if (data >= root.data) {
				root.right = insertNode(root.right, data);
			} else {
				return root;
			}
			return root;
		}
	}

	public void add(int data) {
		root = insertNode(root, data);
	}

	public boolean search(Node node, int data) {

		if (node == null)
			return false;
		if (node.data == data) {
			return true;
		}
		if (data <= node.data) {
			return search(node.left, data);
		} else {
			return search(node.right, data);
		}
	}

	public boolean contains(int data) {
		return search(root, data);
	}

	public void printNode(Node root) {

		printNode(root.left);
		System.out.println(root.data);
		printNode(root.right);
	}

	public static void main(String[] args) {

		BinarySearchTree root = new BinarySearchTree();

		root.add(10);

	}
}


11) Print Star Pattern


	public static void printStar(int n) {

		for (int i = 0; i < n - 1; i++) {
			for (int j = 0; j < 2 * n; j++) {
				if (((n - 1) - i <= j) && (j <= (n - 1) + i)) {
					System.out.print("*");
				} else {
					System.out.print(" ");
				}
			}
			System.out.println();
		}

	}


